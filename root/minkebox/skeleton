{
  name: `File Share`,
  description: `Share your files on the network using Samba`,
  uuid: `83F87920-93CB-40E7-A7F4-6D6796FFB7A1`,
  image: `registry.minkebox.net/minkebox/samba`,
  tags: [ 'Shares', 'Storage' ],
  actions: [
    {
      type: `Header`,
      title: `User`
    },
    {
      type: `Text`,
      text: `Select the username and password to access the shared files. Leave this blank if you want anyone to have access.`
    },
    {
      type: `EditEnvironment`,
      name: `SAMBA_USERNAME`,
      description: `Select the user's login name`,
      placeholder: `Guest`
    },
    {
      type: `EditEnvironment`,
      name: `SAMBA_PASSWORD`,
      description: `Select the user's password`,
      placeholder: `Guest`
    },
    {
      type: `Header`,
      title: `Applications Folders`
    },
    {
      type: `Text`,
      text: `Other applications can offer content they want to share.`
    },
    {
      type: `SelectShares`,
      name: `/shareable`,
      description: `Select what to share. You can share using the default name or pick a name that's more meaningful`
    },
    {
      type: `Header`,
      title: `Advanced`,
      visible: `property.Advanced`
    },
    {
      type: `EditEnvironment`,
      name: `SAMBA_WORKGROUP`,
      description: `Set the workgroup name`,
      placeholder: `WORKGROUP`
    },
    {
      type: `Header`,
      title: `Network`
    },
    {
      type: `Text`,
      text: `Select which network this application will use. You probably want <b>home</b> unless this application is being used on a private network.`
    },
    {
      type: `SelectNetwork`,
      name: `primary`,
      description: `Select network`
    }
  ],
  properties: [
    {
      type: `Environment`,
      name: `SAMBA_USERNAME`
    },
    {
      type: `Environment`,
      name: `SAMBA_PASSWORD`
    },
    {
      type: `Environment`,
      name: `SAMBA_WORKGROUP`
    },
    {
      type: `Directory`,
      name: `/etc/status`,
      style: `boot`
    },
    {
      type: `Directory`,
      name: `/shareable`,
      style: `temp`
    },
    {
      type: `Port`,
      name: `137/udp`,
      port: 137,
      protocol: `UDP`
    },
    {
      type: `Port`,
      name: `138/udp`,
      port: 138,
      protocol: `UDP`
    },
    {
      type: `Port`,
      name: `139/tcp`,
      port: 139,
      protocol: `TCP`
    },
    {
      type: `Port`,
      name: `445/tcp`,
      port: 445,
      protocol: `TCP`,
      mdns: {
        type: `_smb._tcp`
      }
    },
    {
      type: `Port`,
      name: `0/tcp`,
      port: 0,
      protocol: `TCP`,
      mdns: {
        type: `_device-info._tcp`,
        txt: {
          model: `Xserve`
        }
      }
    },
    {
      type: `Network`,
      name: `primary`,
      value: `home`
    }
  ],
  monitor: {
    cmd: `cd /shareable;du -d0 *`,
    init: `
      <div style="min-width: 400px; height: 250px">
        <canvas style="position: absolute" id="{{ID}}"></canvas>
      </div>
      <script>
        (function(){
          const doc = getComputedStyle(document.documentElement);
          const textcolor = doc.getPropertyValue('--secondary-text-color');
          const linecolor = doc.getPropertyValue('--graph-grid-color');
          const chart = new Chart(document.getElementById("{{ID}}").getContext("2d"), {
            type: 'horizontalBar',
            data: {
              datasets: [{
                backgroundColor: [ '#fd0a1a', '#ffd73e', '#278b30', '#b12427', '#808020', '#fd471f', '#41b376', '#fd1a91', '#88cce7', '#19196b', '#efad5a', '#d85452' ],
                data: []
              }],
              labels: [],
            },
            options: {
              animation: { duration: 1000, easing: 'linear' },
              maintainAspectRatio: false,
              adaptive: true,
              legend: { display: false },
              title: { display: true, text: 'File Usage (GB)', fontColor: textcolor },
              scales: {
                xAxes: [{
                  ticks: { precision: 2, beginAtZero: true, fontColor: textcolor },
                  gridLines: { zeroLineColor: linecolor, color: linecolor }
                }],
                yAxes: [{
                  ticks: { fontColor: textcolor },
                  gridLines: { display: false }
                }]
              }
            }
          });
          window.monitor("{{ID}}", 3600, (input) => {
            const lines = input.split('\\n');
            let c = 0;
            for (let i = 0; i < lines.length && lines[i]; i++) {
              const p = lines[i].split(/\\t+/);
              chart.data.labels[c] = p[1];
              chart.data.datasets[0].data[c] = parseInt(p[0]) / 1000000;
              c++;
            }
            chart.data.labels.length = c;
            chart.data.datasets[0].data.length = c;
            chart.update();
          });
        })();
      </script>
    `
  }
}
